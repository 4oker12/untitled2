# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  name: String
  role: Role
  handle: String
}

enum Role {
  ADMIN
  USER
}

type AuthPayload {
  accessToken: String
  refreshToken: String
  user: User
}

type FriendRequest {
  id: ID!
  from: User
  to: User
  status: FriendRequestStatus
  createdAt: String
  updatedAt: String
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

type Message {
  id: ID!
  fromUserId: ID!
  toUserId: ID!
  body: String!
  createdAt: String!
  readAt: String
}

type UnreadByUser {
  userId: ID!
  count: Int!
}

type UnreadSummary {
  total: Int!
  byUser: [UnreadByUser!]!
}

type Query {
  health: String!
  ping: String!
  me: User
  friendsSvc: [User!]!
  friendRequests(direction: String): [FriendRequest!]!
  searchUsers(q: String!): [User!]!
  messages(input: MessagesPageInput!): [Message!]!
  unreadSummary: UnreadSummary!
}

input MessagesPageInput {
  withUserId: ID!
  cursor: ID
  take: Int
}

type Mutation {
  noop: String!
  debugEcho(payload: String!): String!
  register(input: RegisterInput!): User!
  login(input: LoginInput!): AuthPayload!
  sendFriendRequest(input: SendFriendRequestInput!): FriendRequest!
  acceptFriendRequest(id: ID!): FriendRequest!
  declineFriendRequest(id: ID!): FriendRequest!
  cancelFriendRequest(id: ID!): FriendRequest!
  removeFriend(userId: ID!): Boolean!
  sendMessage(input: SendMessageInput!): Message!
  markMessageRead(id: ID!): Message!
}

input RegisterInput {
  email: String!
  password: String!
  name: String
  handle: String
}

input LoginInput {
  email: String!
  password: String!
}

input SendFriendRequestInput {
  userId: String
  toHandle: String
}

input SendMessageInput {
  toUserId: ID!
  body: String!
}